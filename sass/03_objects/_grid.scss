////////////////////////////////////////////////////////////////////////////////
// Container
////////////////////////////////////////////////////////////////////////////////

.container {
    margin: 0 auto;
    padding-left: $gutter;
    padding-right: $gutter;

    @media (max-width: $screen-s) {
        width: $container-s;
    }

    @media (min-width: $screen-s + 1) {
        width: $container-m;
    }

    @media (min-width: $screen-m + 1) {
        width: $container-l;
    }

    @media (min-width: $screen-l + 1) {
        width: $container-xl;
    }

    @media (min-width: $screen-xl + 1) {
        width: $container-limit;
    }
}





////////////////////////////////////////////////////////////////////////////////
// Grid
////////////////////////////////////////////////////////////////////////////////

%column {
    display: inline-block;
    vertical-align: top;
    min-height: 1px;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
}

@mixin s-m-l-columns {
    @for $i from 1 through $s-grid {
        .s-#{$i} {
            @extend %column;
        }
    }
    @for $i from 1 through $m-grid {
        .m-#{$i} {
            @extend %column;
        }
    }
    @for $i from 1 through $l-grid {
        .l-#{$i} {
            @extend %column;
        }
    }
}

@mixin s-grid {
    @for $i from 1 through $s-grid {
        .s-#{$i} {
            width: percentage((1 / $s-grid) * $i);
        }
    }
}

@mixin m-grid {
    @for $i from 1 through $m-grid {
        .m-#{$i} {
            width: percentage((1 / $m-grid) * $i);
        }
    }
}

@mixin l-grid {
    @for $i from 1 through $l-grid {
        .l-#{$i} {
            width: percentage((1 / $l-grid) * $i);
        }
    }
}

@mixin row {
    @include display-flex;
    @include flex-wrap(wrap);
    @include flex-basis(100%);
}





////////////////////////////////////////////////////////////////////////////////
// Offsets
////////////////////////////////////////////////////////////////////////////////

@mixin offset-s-grid {
    @for $i from 1 through $s-grid {
        .off-s-#{$i} {
            margin-left: percentage((1 / $s-grid) * $i);
        }
    }
}

@mixin offset-m-grid {
    @for $i from 1 through $m-grid {
        .off-m-#{$i} {
            margin-left: percentage((1 / $m-grid) * $i);
        }
    }
}

@mixin offset-l-grid {
    @for $i from 1 through $l-grid {
        .off-l-#{$i} {
            margin-left: percentage((1 / $l-grid) * $i);
        }
    }
}




// LAST

.last + * {
    content: " ";
    // display: table;
    clear: both;
}

.last + * {
    clear: both;
}


.last + *:before {
    content: " ";
    display: table;
    clear: both;
}

@media (max-width: $screen-m - 1) {
    .last-s + * {
        content: " ";
        display: table;
        clear: both;
    }
}

@media (min-width: $screen-m) and (max-width: ($screen-l - 1)) {
    .last-m + * {
        content: " ";
        display: table;
        clear: both;
    }
}

@media (min-width: $screen-l) {
    .last-l + * {
        content: " ";
        display: table;
        clear: both;
    }
}





////////////////////////////////////////////////////////////////////////////////
// Block Grid
////////////////////////////////////////////////////////////////////////////////

@mixin block($number) {
    > * {
        width: percentage(1 / $number);
        float: left;
        padding: 0 $gutter;
    }

    > *:nth-child(#{$number}n + 1) {
        @include clearfix;
    }
}

@media (max-width: $screen-m - 1) {
    @each $number in $block-columns {
        .block-s-#{$number} {
            @include block($number);
        }
    }
}

@media (min-width: $screen-m) and (max-width: $screen-l - 1) {
    @each $number in $block-columns {
        .block-m-#{$number} {
            @include block($number);
        }
    }
}

@media (min-width: $screen-l) {
    @each $number in $block-columns {
        .block-l-#{$number} {
            @include block($number);
        }
    }
}

[class*="block-"] {
    overflow: auto;

    &:before {
        content: "";
    }

    &:after {
        @include clearfix;
    }
}

////////////////////////////////////////////////////////////////////////////////
// Generated CSS
////////////////////////////////////////////////////////////////////////////////

.grid {
    @include display-flex;
    @include flex-direction(row);
    @include flex-wrap(wrap);
    @include align-items(stretch);
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
}

// columns small - medium - large
@include s-m-l-columns;

// small grid
@include s-grid;
@include offset-s-grid;

// medium grid
@media (min-width: $screen-s + 1) and (max-width: $screen-m) {
    @include m-grid;
    @include offset-m-grid;
}

// large grid
@media (min-width: $screen-m + 1) {
    @include l-grid;
    @include offset-l-grid;
}

// nested grid
.row {
    @include display-flex;
    @include flex-direction(row);
    @include flex-wrap(wrap);
    @include align-items(stretch);
    width: 100%;
}

.grid-narrow {
    width: 100%;
    max-width: 700px;
}
